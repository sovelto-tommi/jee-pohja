{"version":3,"sources":["logo.svg","oma.js","components/Kirja.js","services/kirja-api.js","components/KirjaLomake.js","components/KirjaKomponentti.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Oma","jsx","Component","Kirja","props","kirja","nimi","hinta","kirjailijat","etunimi","url","KirjaLomake","arvoMuuttunut","e","uusitila","target","name","value","setState","laheta","vanhemmanFunktio","state","kieli","editio","id","kustantaja","htmlFor","type","this","onChange","defaultValue","onClick","KirjaKomponentti","haeKirjat","fetch","then","resp","json","kirjat","uusiKirja","console","log","method","headers","body","JSON","stringify","uusikirja","vastaus","KirjaLista","map","key","className","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dcb3815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Oma extends Component {\r\n    render() {\r\n        let muttuja = false;\r\n        let jsx;\r\n        if (muttuja)\r\n            jsx = <p>Oma komponentti</p>;\r\n        else\r\n            jsx = <p>Toinen komponentti</p>;\r\n        return (\r\n            <div>\r\n                <div>{jsx}</div>\r\n                <p></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Oma;","import React from 'react';\r\n\r\nconst Kirja = (props) => {\r\n    const {nimi, hinta, kirjailijat} = props.kirja;\r\n    return (\r\n        <tr>\r\n            <td>{nimi}</td>\r\n            <td>{hinta}</td>\r\n            <td>{kirjailijat[0].etunimi}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Kirja;","const url = '/api/kirjat';\r\n\r\nexport function haeKirjat() {\r\n    return fetch(url)\r\n        .then(resp => {\r\n            return resp.json()\r\n        });\r\n}\r\n\r\nexport function uusikirja(kirja) {\r\n    return fetch(url, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify(kirja)\r\n    })\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport {uusikirja} from \"../services/kirja-api\";\r\n\r\nclass KirjaLomake extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nimi: '',\r\n            hinta: 0.0,\r\n            kieli: 'suomi',\r\n            editio: '1st',\r\n            kirjailijat: [\r\n                {id: 3}\r\n            ],\r\n            kustantaja: {\r\n                id: 1\r\n            },\r\n            \"isbn13\": \"978-0596009205\",\r\n            \"isbn10\": \"0596009208\"\r\n        }\r\n    }\r\n\r\n    arvoMuuttunut = (e) => {\r\n        const uusitila = {};\r\n        uusitila[e.target.name] = e.target.value;\r\n        this.setState(uusitila);\r\n    }\r\n\r\n    laheta = () => {\r\n        this.props.vanhemmanFunktio(this.state);\r\n        this.setState({nimi: '', hinta: 0, kieli: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <p><label htmlFor={'lomake.nimi'}>Nimi: </label>\r\n                    <input type='text' id='lomake.nimi' name='nimi' value={this.state.nimi} onChange={this.arvoMuuttunut}/>\r\n                </p>\r\n                <p><label htmlFor={'lomake.hinta'}>Hinta: </label>\r\n                    <input type='number' id='lomake.hinta' name='hinta' value={this.state.hinta} onChange={this.arvoMuuttunut}/>\r\n                </p>\r\n                <p><label htmlFor={'lomake.kieli'}>Kieli: </label>\r\n                    <input type='text' id='lomake.kieli' name='kieli' value={this.state.kieli} onChange={this.arvoMuuttunut}/>\r\n                </p>\r\n                <p>\r\n                    <input type='button' defaultValue='Lähetä' onClick={this.laheta}/>\r\n                </p>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KirjaLomake;","import React, {Component} from \"react\";\r\nimport Kirja from './Kirja';\r\nimport {haeKirjat, uusikirja} from '../services/kirja-api';\r\nimport KirjaLomake from \"./KirjaLomake\";\r\n\r\nexport default class KirjaKomponentti extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { kirjat: []};\r\n    }\r\n    componentDidMount() {\r\n        this.haeKirjat();\r\n    }\r\n\r\n    haeKirjat = () => {\r\n        haeKirjat().then(kirjat=> {\r\n            this.setState({kirjat: kirjat});\r\n        });\r\n    }\r\n    uusiKirja =  (kirja) => {\r\n        console.log(\"Lähetetään\", kirja);\r\n        uusikirja(kirja).then((vastaus)=>{\r\n            console.log(\"tuli vastaus\", vastaus);\r\n            this.haeKirjat();\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <KirjaLista kirjat={this.state.kirjat}/>\r\n                <hr/>\r\n                <KirjaLomake vanhemmanFunktio={this.uusiKirja}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass KirjaLista extends Component {\r\n    render() {\r\n        const kirjat = this.props.kirjat.map(kirja => {\r\n            return <Kirja kirja={kirja} key={kirja.id}/>;\r\n        })\r\n        return (\r\n            <div className='KirjaLista'>\r\n                <table>\r\n                    <tbody>\r\n                    {kirjat}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Oma from \"./oma\";\nimport KirjaKomponentti from \"./components/KirjaKomponentti\";\nimport KirjaLomake from \"./components/KirjaLomake\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Oma/>\n          <hr/>\n          <KirjaKomponentti/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}